generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  userId                String @db.ObjectId
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String? @db.String
  access_token          String? @db.String
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String? @db.String
  session_state         String?

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  firstName             String?
  lastName              String?
  email                 String? @unique
  emailVerified         DateTime?
  image                 String?
  hashedPassword        String?
  verificationToken     String?

  accounts              Account[]
  properties            Property[]
  reviews               Review[]

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

}

model Category {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  name                  Json
  emoji                 String?

  propertyIds           String[] @db.ObjectId

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  properties            Property[] @relation(fields: [propertyIds], references: [id])
}

model Property {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  description           String?
  price                 Int
  imageSrc              String
  quadrature            Int
  guestCount            Int
  roomCount             Int
  bathroomCount         Int
  includesKitchen       Boolean
  includesParking       Boolean

  userId                String @db.ObjectId
  adressId              String @db.ObjectId @unique
  categoryIds           String[] @db.ObjectId
  reviews               Review[]

  createdAt             DateTime @default(now())
  updatedtAt            DateTime @updatedAt

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  address               Address @relation(fields: [adressId], references: [id])
  categories            Category[] @relation(fields: [categoryIds], references: [id])
}

model Address {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  street                String
  city                  String
  county                String?
  country               String
  postalCode            Int

  property              Property?

  createdAt             DateTime @default(now())
  updatedtAt            DateTime @updatedAt
}

model Review {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  rating                Int
  comment               String

  userId                String @db.ObjectId
  propertyId            String @db.ObjectId

  createdAt             DateTime @default(now())
  updatedtAt            DateTime @updatedAt

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  property              Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}